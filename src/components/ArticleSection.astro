---
import ArticleCard from './ArticleCard.astro';

interface ArticleData {
  title: string;
  slug: string;
  date: Date;
  image: string;
  description: string;
  category: string | string[];
  tags?: string[];
}

export interface Props {
  title: string;
  description?: string;
  articles: ArticleData[];
  viewAllLink?: string;
  columns?: number;
}

const { 
  title, 
  description, 
  articles, 
  viewAllLink = "/articulos", 
  columns = 3 
} = Astro.props;

// Determinar las clases de grid según el número de columnas
const gridClass = {
  1: "grid-cols-1",
  2: "grid-cols-1 md:grid-cols-2",
  3: "grid-cols-1 md:grid-cols-2 lg:grid-cols-3",
  4: "grid-cols-1 md:grid-cols-2 lg:grid-cols-4"
}[columns] || "grid-cols-1 md:grid-cols-2 lg:grid-cols-3";

<section class="py-16 bg-gray-50">
  <div class="container mx-auto px-4">
    <div class="flex flex-col md:flex-row md:items-end md:justify-between mb-12">
      <div data-aos="fade-up">
        <h2 class="text-3xl font-bold text-gray-900 mb-4 font-display">{title}</h2>
        {description && (
          <p class="text-lg text-gray-600 max-w-2xl">
            {description}
          </p>
        )}
      </div>
      
      {viewAllLink && (
        <a 
          href={viewAllLink} 
          class="mt-4 md:mt-0 inline-flex items-center text-primary-600 font-medium hover:text-primary-700 transition-colors" 
          data-aos="fade-up" 
          data-aos-delay="100"
        >
          Ver todos los artículos
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 ml-1">
            <path stroke-linecap="round" stroke-linejoin="round" d="M17.25 8.25L21 12m0 0l-3.75 3.75M21 12H3" />
          </svg>
        </a>
      )}
    </div>
    
    <div class={`grid ${gridClass} gap-8`}>
      {articles.map((article) => (
        <ArticleCard article={article} />
      ))}
    </div>
  </div>
</section> 